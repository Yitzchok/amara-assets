/*
 * Amara, universalsubtitles.org
 *
 * Copyright (C) 2016 Participatory Culture Foundation
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see
 * http://www.gnu.org/licenses/agpl-3.0.html.
 */

//
// ajax.js -- Amara AJAX functionality

var $ = require('jquery');
var _ = require('underscore');
var querystring = require('./querystring');
var dialogs = require('./dialogs');

$.behaviors('.ajaxForm', ajaxForm);
$.behaviors('.ajaxLink', ajaxLink);
$.behaviors('body.ajaxRefresh', ajaxRefresh);

function processAjaxResponse(responseData) {
    // Handles processing our AJAX responses generated by the ui.ajax.AJAXResponseRender class.
    _.each(responseData, function(change) {
        switch(change[0]) {
            case 'replace':
                var container = $(change[1]);
                var content = $(change[2]);
                container.empty().append(content);
                container.updateBehaviors();
                break;

            case 'remove':
                $(change[1]).remove();
                break;

            case 'showModal':
                dialogs.showModal(change[1]).updateBehaviors();
                break;

            case 'hideModal':
                if(change[1]) {
                    $(change[1]).modal('hide');
                } else {
                    closeCurrentModal();
                }
                break;

            case 'showModalProgress':
                dialogs.showModalProgress(change[1], change[2]);
                break;

            case 'performRequest':
                setTimeout(function() {
                    $.ajax(change[1], {
                        success: processAjaxResponse
                    });
                }, change[2]);
                break;

            case 'clearForm':
                $(change[1]).clearForm();
                break;

            case 'reloadPage':
                $(window).on('beforeunload', scrollAfterReload);
                window.location.reload();
                break;
        }
    });
}

function scrollAfterReload() {
    $(window).scrollTop(0);
    $(window).off('beforeunload', scrollAfterReload);
}

function ajaxForm(form) {
    var submitting = false;
    var sawSecondSubmit = false;
    var inPeriodicSubmit = false;
    form = $(form);
    form.add('button', form).ajaxForm({
        beforeSubmit: function(data) {
            if(submitting) {
                sawSecondSubmit = true;
                return false;
            }
            submitting = true;
            lastSerialize = form.formSerialize();
            if(form.hasClass('updateLocation')) {
                updateLocation(false);
            }
            if(form.hasClass('copyQuery')) {
                _.each(querystring.parse(), function(value, name) {
                    data.push({ name: name, value: value });
                });
            }
            if(form.hasClass('disableInputsOnSubmit')) {
                $(':input', form).prop('disabled', true);
            }
        },
        complete: function(xhr, status) {
            submitting = false;
            if(sawSecondSubmit) {
                sawSecondSubmit = false;
                form.submit();
            }
            if(inPeriodicSubmit) {
                inPeriodicSubmit = false;
                if(status == 'success') {
                    schedulePeriodicSubmit();
                }
            }
        },
        success: processAjaxResponse,
        error: function() {
            if(!inPeriodicSubmit) {
                alert(gettext('Error submitting form'));
                dialogs.closeCurrentModal();
            }
        }
    });

    if(form.hasClass('updateOnChange')) {
        $(':input', form).change(submitIfChanged);
        $('input[type=text].updateOnKeyUp', form).keyup(submitIfChanged);
    }

    function schedulePeriodicSubmit() {
        var delay = form.data('period') * 1000;
        setTimeout(function() {
            inPeriodicSubmit = true;
            form.submit();
        }, delay);
    }

    if(form.hasClass('updatePeriodically') &&
            $.isNumeric(form.data('period'))) {
        schedulePeriodicSubmit();
    }

    var lastSerialize = form.formSerialize();
    function formHasChanged() {
        return form.formSerialize() != lastSerialize;
    }
    function submitIfChanged() {
        if(formHasChanged()) {
            updateLocation(true);
            form.submit();
        }
    }
    function updateLocation(resetPage) {
        if(!formHasChanged()) {
            return;
        }
        var url = window.location.protocol + "//" + window.location.host +
            window.location.pathname + '?' + form.formSerialize()
        var params = querystring.parse();
        if(!resetPage && params.page) {
            url += '&page=' + params.page;
        }
        if (url != history.state) {
            history.pushState(url, "", url);
        }
    }

}

function ajaxLink(link) {
    var link = $(link);
    var inProgress = false;
    var linkContents = null;

    var ajaxParams = {
        beforeSend: function() {
            if(inProgress) {
                return false;
            }
            inProgress = true;
            if(link.hasClass('loadingIcon')) {
                link.css({
                    'width': link.css('width'),
                });
                linkContents = link.contents();
                linkContents.detach();
                link.empty().append($('<i class="icon icon-loading"></i>'));
            }
        },
        complete: function() {
            inProgress = false;
            if(link.hasClass('loadingIcon')) {
                link.removeAttr('style');
                link.empty().append(linkContents);
            }
        },
        success: processAjaxResponse,
    };

    link.click(function() {
        $.ajax(link.attr('data-href'), ajaxParams);
        return (link.attr('data-nav') === "true");
    });
}

function ajaxRefresh(body) {
    var seconds = $(body).data('seconds');
    if(seconds === undefined) {
        return;
    }

    function scheduleRefresh() {
        setTimeout(doRefresh, seconds * 1000);
    }

    function doRefresh() {
        $.ajax('', {
            success: processAjaxResponse,
            complete: scheduleRefresh,
        });
    }

    scheduleRefresh();
}
